'name': 'Raxe'
'comment': 'Raxe Syntax: version 0.0.1'
'scopeName': 'source.raxe'

'fileTypes': [
  'rx'
  'rxs'
  'Raxefile'
]

'firstLineMatch': '\\A#!.*?\\braxe\\b'

'patterns': [
  {
    'include': '#preprocessor'
  }
  {
    'include': '#comments'
  }
  {
    'include': '#strings'
  }
  {
    'include': '#constants'
  }
  {
    'include': '#classes'
  }
  {
    'include': '#functions'
  }
  {
    'include': '#variables'
  }
  {
    'include': '#regex'
  }
  {
    'include': '#keywords'
  }
  {
    'include': '#operators'
  }
  {
    'include': '#storage'
  }
  {
    'include': '#support'
  }
]

'repository':
  'preprocessor':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'keyword.preprocessor.macro.raxe'
        'match': '^[ \\t]*(#(?:if|else|elsif|end)).*'
        'name': 'meta.preprocessor.raxe'
      }
      {
        'match': '#(if|else|elsif|end)\\b'
        'name': 'keyword.preprocessor.macro.raxe'
      }
    ]

  'comments':
    'patterns': [
      {
        'begin': '^[\\s]*###'
        'captures':
          '0':
            'name': 'punctuation.definition.comment.raxe'
        'end': '^[\\s]*###'
        'name': 'comment.block.raxe'
        'patterns': [
          {
            'match': '(?<=^|\\s)@\\w*(?=\\s)'
            'name': 'storage.type.annotation.raxe'
          }
        ]
      }
      {
        'begin': '(^[ \\t]+)?(?=#)'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.raxe'
        'end': '(?!\\G)'
        'patterns': [
          {
            'begin': '#'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.raxe'
            'end': '\\n'
            'name': 'comment.line.number-sign.raxe'
          }
        ]
      }
    ]

  'strings':
    'patterns': [
      {
        'begin': '^[\\s]*"""'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.raxe'
        'end': '^[\\s]*"""'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.raxe'
        'name': 'string.quoted.other.multiline.raxe'
        'patterns': [
          {
            'include': '#interpolated'
          }
          {
            'include': '#escaped'
          }
        ]
      }
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.raxe'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.raxe'
        'name': 'string.quoted.double.interpolated.raxe'
        'patterns': [
          {
            'include': '#interpolated'
          }
          {
            'include': '#escaped'
          }
        ]
      }
    ]

  'constants':
    'patterns': [
      {
        'match': '\\b(true|false|null|void)\\b'
        'name': 'constant.language.raxe'
      }
      {
        'match': '\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b'
        'name': 'constant.numeric.raxe'
      }
    ]

  'classes':
    'captures':
      '1':
        'name': 'keyword.control.raxe'
      '2':
        'name': 'entity.name.type.class.raxe'
    'match': '^\\s*(class|trait|enum|abstract|interface)\\s+([@_A-Za-z]\\w*)'
    'name': 'meta.class.raxe'

  'functions':
    'captures':
      '1':
        'name': 'keyword.other.raxe'
      '2':
        'name': 'entity.name.function.raxe'
    'match': '\\b(def)\\s+([@_a-z]\\w*)[\\[\\w\\], ]*\\s*\\('
    'name': 'meta.function.raxe'

  'variables':
    'captures':
      '1':
        'name': 'keyword.control.raxe'
      '2':
        'name': 'keyword.operator.assignment.raxe'
    'match': '\\b(def)(?:\\s+(?:[a-zA-Z0-9_@]\\w*)\\s*)(?:[^\\(\\)](=|:))'
    'name': 'variable.other.raxe'

  'escaped':
    'match': '\\\\.'
    'name': 'constant.character.escape.raxe'

  'interpolated':
    'patterns': [
      {
        'begin': '(#\\{)'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.embedded.begin.raxe'
          '1':
            'name': 'source.raxe'
        'contentName': 'source.raxe'
        'end': '(\\})'
        'endCaptures':
          '0':
            'name': 'punctuation.section.embedded.end.raxe'
          '1':
            'name': 'source.raxe'
        'name': 'meta.embedded.line.raxe'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.variable.raxe'
        'match': '(#)[a-zA-Z_@]\\w*'
        'name': 'variable.other.readwrite.global.raxe'
      }
    ]

  'keywords':
    'patterns': [
      {
        'match': '\\b(try|catch|throw)\\b'
        'name': 'keyword.control.catch-exception.raxe'
      }
      {
        'match': '\\w+\\s*\\?\\s*\\w+\\s*:'
        'name': 'keyword.control.ternary-if.raxe'
      }
      {
        'captures':
          '1':
            'name': 'keyword.control.raxe.flow-control.2'
        'match': '\\b(if|return|while|for|elsif)\\b\\s*\\('
      }
      {
        'match': '\\b(return|end|break|continue|do|while|for|switch|if|else|elsif|when)\\b'
        'name': 'keyword.control.flow-control.raxe'
      }
      {
        'match': '\\b(cast|untyped)\\b'
        'name': 'keyword.other.untyped.raxe'
      }
      {
        'match': '\\btrace\\b'
        'name': 'keyword.other.trace.raxe'
      }
      {
        'match': '\\b(this|super|@|@@)\\b'
        'name': 'variable.language.raxe'
      }
      {
        'match': '\\b(new|def)\\b'
        'name': 'keyword.other.variable.raxe'
      }
      {
        'match': '\\b__(init|instanceof|string_rec)\\b'
        'name': 'support.variable.magic.raxe'
      }
      {
        'match': '\\bprototype\\b'
        'name': 'support.variable.magic.raxe'
      }
      {
        'match': '\\b__(init|name|ename|super|unprotect|constructs|class|enum)__\\b'
        'name': 'support.variable.magic.raxe'
      }
    ]

  'storage':
    'patterns': [
      {
        'match': '\\b(public|private|dynamic|inline|extern|typedef|override)\\b'
        'name': 'storage.modifier.raxe'
      }
      {
        'match': '\\b(import|using)\\b'
        'name': 'storage.type.import.raxe'
      }
    ]

  'operators':
    'patterns': [
      {
        'match': '\\b(in)\\b'
        'name': 'keyword.control.other.raxe'
      }
      {
        'match': '(\\.\\.\\.)'
        'name': 'keyword.control.directive.raxe'
      }
      {
        'match': '((\\b(isnt|is)\\b)|(==|!=|<=|>=|<>|<|>))'
        'name': 'keyword.operator.comparison.raxe'
      }
      {
        'match': '(<|::)'
        'name': 'keyword.operator.inheritance.raxe'
      }
      {
        'match': '(=|:)'
        'name': 'keyword.operator.assignment.raxe'
      }
      {
        'match': '(\\-\\-|\\+\\+)'
        'name': 'keyword.operator.increment-decrement.raxe'
      }
      {
        'match': '(\\-|\\+|\\*|\\/|%)'
        'name': 'keyword.operator.arithmetic.raxe'
      }
      {
        'match': '((\\b(not|and|or)\\b)|(!|&&|\\|\\|))'
        'name': 'keyword.operator.logical.raxe'
      }
    ]

  'support':
    'patterns': [
      {
        'match': '\\b[A-Z]\\w*'
        'name': 'support.class.raxe'
      }
      {
        'match': '\\b([a-z_@]\\w*)\\b(?=\\s*(?:\\())'
        'name': 'support.function.raxe'
      }
    ]

  'regex':
    'begin': '~/'
    'beginCaptures':
      '0':
        'name': 'punctuation.section.regexp.begin.raxe'
    'end': '/[eimnosux]*'
    'endCaptures':
      '0':
        'name': 'punctuation.section.regexp.end.raxe'
    'name': 'string.regexp.interpolated.raxe'
    'patterns': [
      {
        'include': '#heregexp'
      }
    ]

  'regex-character-class':
    'patterns': [
      {
        'match': '\\\\[wWsSdD]|\\.'
        'name': 'constant.character.character-class.regexp'
      }
      {
        'match': '\\\\([0-7]{3}|x\\h\\h|u\\h\\h\\h\\h)'
        'name': 'constant.character.numeric.regexp'
      }
      {
        'match': '\\\\c[A-Z]'
        'name': 'constant.character.control.regexp'
      }
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.backslash.regexp'
      }
    ]

  'heregexp':
    'patterns': [
      {
        'match': '\\\\[bB]|\\^|\\$'
        'name': 'keyword.control.anchor.regexp'
      }
      {
        'match': '\\\\[1-9]\\d*'
        'name': 'keyword.other.back-reference.regexp'
      }
      {
        'match': '[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??'
        'name': 'keyword.operator.quantifier.regexp'
      }
      {
        'match': '\\|'
        'name': 'keyword.operator.or.regexp'
      }
      {
        'begin': '(\\()((\\?=)|(\\?!))'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.group.regexp'
          '3':
            'name': 'meta.assertion.look-ahead.regexp'
          '4':
            'name': 'meta.assertion.negative-look-ahead.regexp'
        'end': '(\\))'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.group.regexp'
        'name': 'meta.group.assertion.regexp'
        'patterns': [
          {
            'include': '#heregexp'
          }
        ]
      }
      {
        'begin': '\\((\\?:)?'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.group.regexp'
        'end': '\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.group.regexp'
        'name': 'meta.group.regexp'
        'patterns': [
          {
            'include': '#heregexp'
          }
        ]
      }
      {
        'begin': '(\\[)(\\^)?'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.character-class.regexp'
          '2':
            'name': 'keyword.operator.negation.regexp'
        'end': '(\\])'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.character-class.regexp'
        'name': 'constant.other.character-class.set.regexp'
        'patterns': [
          {
            'captures':
              '1':
                'name': 'constant.character.numeric.regexp'
              '2':
                'name': 'constant.character.control.regexp'
              '3':
                'name': 'constant.character.escape.backslash.regexp'
              '4':
                'name': 'constant.character.numeric.regexp'
              '5':
                'name': 'constant.character.control.regexp'
              '6':
                'name': 'constant.character.escape.backslash.regexp'
            'match': '(?:.|(\\\\(?:[0-7]{3}|x\\h\\h|u\\h\\h\\h\\h))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x\\h\\h|u\\h\\h\\h\\h))|(\\\\c[A-Z])|(\\\\.))'
            'name': 'constant.other.character-class.range.regexp'
          }
          {
            'include': '#regex-character-class'
          }
        ]
      }
      {
        'include': '#regex-character-class'
      }
      {
        'include': '#interpolated'
      }
    ]
