'comment': 'Raxe Syntax'
'scopeName': 'source.raxe'
'fileTypes': [
  'rx'
  'Raxefile'
]
'firstLineMatch': '\\A#!.*?\\braxe\\b'
'name': 'Raxe'
'patterns': [
  {
    'captures':
      '1':
        'name': 'keyword.control.raxe'
      '2':
        'name': 'keyword.operator.assignment.raxe'
    'match': '\\b(def)(?:\\s+(?:[a-zA-Z_@]\\w*)\\s*)?(?:[^\\(\\)]*)(=|:)'
    'name': 'variable.other.raxe'
  }
  {
    'captures':
      '1':
        'name': 'keyword.control.class.raxe'
      '2':
        'name': 'entity.name.type.class.raxe'
    'match': '^\\s*(class|trait|enum|abstract|interface)\\s+([.a-zA-Z0-9_@]+)'
    'name': 'meta.class.raxe'
  }
  {
    'captures':
      '1':
        'name': 'keyword.control.raxe'
      '2':
        'name': 'entity.name.function.scope.raxe'
      '3':
        'name': 'entity.name.function.raxe'
      '4':
        'name': 'punctuation.definition.parameters.begin.raxe'
      '5':
        'name': 'variable.parameter.function.raxe'
      '6':
        'name': 'punctuation.definition.parameters.end.raxe'
    'match': '\\b(def)(?:\\s+([a-zA-Z_@]+)?([a-zA-Z_]\\w*)\\s*)?(\\()([^)]*)(\\))'
    'name': 'meta.function.raxe'
  }
  {
    'match': '(?<![\\d.])\\s0x[a-fA-F\\d]+|\\b\\d+(\\.\\d+)?([eE]-?\\d+)?|\\.\\d+([eE]-?\\d+)?'
    'name': 'constant.numeric.raxe'
  }
  {
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.raxe'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.raxe'
    'name': 'string.quoted.double.raxe'
    'patterns': [
      {
        'include': 'punctuation.definition.string.begin.raxe'
      }
      {
        'include': 'punctuation.definition.string.end.raxe'
      }
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.raxe'
      }
    ]
  }
  {
    'begin': '(?<!--)\\[(=*)\\['
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.raxe'
    'end': '\\]\\1\\]'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.raxe'
    'name': 'string.quoted.other.multiline.raxe'
  }
  {
    'begin': '^[\\s]*##'
    'captures':
      '0':
        'name': 'punctuation.definition.comment.raxe'
    'comment': 'multiline comments'
    'end': '^[\\s]*##'
    'name': 'comment.block.raxe'
  }
  {
    'begin': '(^[ \\t]+)?(?=#(?!\\[(=*)\\[))'
    'beginCaptures':
      '1':
        'name': 'punctuation.whitespace.comment.leading.raxe'
    'end': '(?!\\G)'
    'patterns': [
      {
        'begin': '#'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.raxe'
        'end': '\\n'
        'name': 'comment.line.double-dash.raxe'
      }
    ]
  }
  {
    'match': '\\b(break|do|else|for|if|elsif|return|while|end|private|in|inline|override|import|macro|trace|new|switch|when|try|catch|throw)\\b'
    'name': 'keyword.control.raxe'
  }
  {
    'match': '(?<![^.]\\.|:)\\b(false|null|true)\\b|(?<![.])\\.{3}(?!\\.)'
    'name': 'constant.language.raxe'
  }
  {
    'match': '\\b[A-Z]\\w*'
    'name': 'support.class.raxe'
  }
  {
    'match': '\\b([a-z_@]\\w*)\\b(?=\\s*(?:[({"\']|\\[\\[))'
    'name': 'support.function.any-method.raxe'
  }
  {
    'comment': 'Needs higher precidence than regular expressions.'
    'match': '=|:'
    'name': 'keyword.operator.assignment.raxe'
  }
  {
    'match': '<|::'
    'name': 'keyword.operator.inheritance.raxe'
  }
  {
    'match': '\\+|-|%|\\*|\\/|\\^|==?|~=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.)'
    'name': 'keyword.operator.raxe'
  }
]
